{"version":3,"file":"System.js","sourceRoot":"","sources":["../../../src/lib/util/System.ts"],"names":[],"mappings":";;;;;;AAAA,4CAAoB;AACpB,iDAAqC;AACrC,mFAA0C;AAE1C,SAAgB,WAAW,CAAC,GAAW,EAAE,IAAI,GAAG,KAAK,EAAE,QAAQ,GAAG,IAAI;IACpE,OAAO,IAAI,OAAO,CAAS,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QAC7C,8BAAG,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,+BAA+B,GAAG,EAAE,CAAC,CAAC;QAC3D,IAAA,oBAAI,EAAC,IAAI,CAAC,CAAC,CAAC,0BAA0B,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,UAAU,KAAK,EAAE,MAAM,EAAE,MAAM;YAC1G,IAAI,KAAK,EAAE;gBACT,IAAI,QAAQ,EAAE;oBACZ,8BAAG,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC,8BAAG,CAAC,eAAe,CAAC,uCAAuC,GAAG,KAAK,MAAM,CAAC,QAAQ,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC;iBACvH;gBACD,MAAM,CAAC,KAAK,CAAC,CAAC;aACf;iBACI;gBACH,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;aAC5B;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC;AAfD,kCAeC;AAEM,KAAK,UAAU,MAAM,CAAC,IAAY;IACvC,IAAI,YAAE,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,YAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;QACvD,MAAM,WAAW,CAAC,WAAW,IAAI,EAAE,EAAE,IAAI,CAAC,CAAC;KAC5C;IACD,IAAI,CAAC,YAAE,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;QACxB,MAAM,WAAW,CAAC,mBAAmB,IAAI,EAAE,EAAE,IAAI,CAAC,CAAC;KACpD;IACD,OAAO,WAAW,CAAC,mBAAmB,IAAI,EAAE,EAAE,IAAI,CAAC,CAAC;AACtD,CAAC;AARD,wBAQC;AAED,SAAgB,UAAU,CAAC,IAAY;IACrC,IAAI;QACF,OAAO,YAAE,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,YAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,CAAC;KAC3D;IACD,OAAO,KAAK,EAAE;QACZ,OAAO,KAAK,CAAC;KACd;AACH,CAAC;AAPD,gCAOC","sourcesContent":["import fs from 'fs';\nimport { exec } from 'child_process';\nimport pap from '../PeppyAlsaPipeContext';\n\nexport function execCommand(cmd: string, sudo = false, logError = true) {\n  return new Promise<string>((resolve, reject) => {\n    pap.getLogger().info(`[peppy_alsa_pipe] Executing ${cmd}`);\n    exec(sudo ? `echo volumio | sudo -S ${cmd}` : cmd, { uid: 1000, gid: 1000 }, function (error, stdout, stderr) {\n      if (error) {\n        if (logError) {\n          pap.getLogger().error(pap.getErrorMessage(`[peppy_alsa_pipe] Failed to execute ${cmd}: ${stderr.toString()}`, error));\n        }\n        reject(error);\n      }\n      else {\n        resolve(stdout.toString());\n      }\n    });\n  });\n}\n\nexport async function mkfifo(path: string) {\n  if (fs.existsSync(path) && !fs.lstatSync(path).isFIFO()) {\n    await execCommand(`/bin/rm ${path}`, true);\n  }\n  if (!fs.existsSync(path)) {\n    await execCommand(`/usr/bin/mkfifo ${path}`, true);\n  }\n  return execCommand(`/bin/chmod 0666 ${path}`, true);\n}\n\nexport function fileExists(path: string) {\n  try {\n    return fs.existsSync(path) && fs.lstatSync(path).isFile();\n  }\n  catch (error) {\n    return false;\n  }\n}\n"]}