{"version":3,"file":"ConfManager.js","sourceRoot":"","sources":["../../src/lib/ConfManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { readFile, writeFile } from 'fs/promises';\nimport pap from './PeppyAlsaPipeContext';\nimport { kewToJSPromise } from './util/Misc';\nimport { EOL } from 'os';\nimport { execCommand, fileExists } from './util/System';\nimport chokidar from 'chokidar';\nimport path from 'path';\nimport { EXPORTS_SHARED_VAR_KEY, FIFO_PATH, MPD_CONF_FILE } from './util/Constants';\n\n/**\n * Defines 'volumioNoPeppy' ALSA output that passes streams through the\n * same ALSA pipeline but without peppyalsa.\n */\nconst PEPPY_BYPASS_CONF_FILE = '/etc/alsa/conf.d/90-volumio-no-peppy.conf';\nconst PEPPY_BYPASS_CONF_TMP_FILE = '/tmp/peppy_alsa_pipe_no_peppy.conf';\n\ninterface AlsaSnippet {\n  inPCM: string;\n  outPCM: string;\n  contents: string;\n}\n\ninterface AlsaContribution extends AlsaSnippet {\n  pluginName: string;\n  configFile: string;\n}\n\n\nexport type PeppyBypassStatus = {\n  available: true,\n  alsaDevice: string\n} | {\n  available: false,\n  reason: string\n};\n\nexport type MPDConfStatus = {\n  modified: true,\n  description: string\n} | {\n  modified: false,\n  reason: string\n};\n\nexport interface PeppyAlsaPipeExports {\n  fifoPaths: {\n    meter: string;\n    spectrum: string;\n  },\n  alsaDevices: {\n    fullPipeline: string;\n    peppyBypass: string | null;\n    peppyOnly: string;\n  }\n}\n\nconst FULL_PIPELINE_ALSA_DEVICE = 'volumio';\nconst PEPPY_BYPASS_ALSA_DEVICE = 'volumioNoPeppy';\nconst PEPPY_FIFO_ALSA_DEVICE = 'peppy_fifo';\n\n/**\n * Known plugins with alsa contribs that modify / resample streams\n * so DSDs become playable even with Peppy in the ALSA pipeline.\n */\nconst PEPPY_COMPAT_PLUGINS = [\n  'fusiondsp'\n];\n\nexport default class ConfManager {\n\n  #playerConfChangeDelayTimer: NodeJS.Timeout | null;\n  #peppyBypassStatus: PeppyBypassStatus;\n  #mpdConfStatus: MPDConfStatus;\n  #playerConfWatcher: ReturnType<typeof chokidar['watch']> | null;\n  #isHandlingPlayerConfChange: boolean;\n\n  constructor() {\n    this.#peppyBypassStatus = {\n      available: false,\n      reason: pap.getI18n('PEPPY_ALSA_PIPE_NOT_READY')\n    };\n    this.#mpdConfStatus = {\n      modified: false,\n      reason: pap.getI18n('PEPPY_ALSA_PIPE_NOT_READY')\n    };\n    this.#playerConfWatcher = null;\n    this.#isHandlingPlayerConfChange = false;\n    this.#init();\n  }\n\n  #init() {\n    this.#playerConfWatcher = chokidar.watch(MPD_CONF_FILE);\n    this.#playerConfWatcher.on('add', this.#handlePlayerConfWatcherEvent.bind(this));\n    this.#playerConfWatcher.on('change', this.#handlePlayerConfWatcherEvent.bind(this));\n  }\n\n  #handlePlayerConfWatcherEvent(_path: string) {\n    if (!this.#isHandlingPlayerConfChange && path.basename(_path) === path.basename(MPD_CONF_FILE)) {\n      // Guard against multiple events within a short interval.\n      // We set a delay timer to avoid multiple executions.\n      this.#clearPlayerConfigChangeDelayTimer();\n      this.#playerConfChangeDelayTimer = setTimeout(async () => {\n        this.#isHandlingPlayerConfChange = true;\n        await this.#handlePlayerConfChange();\n        this.#isHandlingPlayerConfChange = false;\n      }, 1500);\n    }\n  }\n\n  #clearPlayerConfigChangeDelayTimer() {\n    if (this.#playerConfChangeDelayTimer) {\n      clearTimeout(this.#playerConfChangeDelayTimer);\n      this.#playerConfChangeDelayTimer = null;\n    }\n  }\n\n  async #handlePlayerConfChange() {\n    await this.#updateNoPeppyConf();\n    await this.#updateMPDConf();\n    this.#updateVolumioSharedVars();\n  }\n\n  async #removeNoPeppyConf() {\n    if (fileExists(PEPPY_BYPASS_CONF_FILE)) {\n      try {\n        await execCommand(`/bin/rm ${PEPPY_BYPASS_CONF_FILE}`, true);\n        await this.#reloadAlsaConf();\n      }\n      catch (error) {\n        pap.getLogger().error(`[peppy_alsa_pipe] Failed to remove \"${PEPPY_BYPASS_CONF_FILE}\"`);\n      }\n    }\n  }\n\n  async #updateNoPeppyConf() {\n    const alsaController = pap.getAlsaController();\n\n    const contribs = (await kewToJSPromise(alsaController.getPluginALSAContributions()) as AlsaContribution[])\n      .filter((c) => c.pluginName !== 'peppy_alsa_pipe');\n\n    const compatPlugin = contribs.find(({pluginName}) => PEPPY_COMPAT_PLUGINS.includes(pluginName));\n    if (compatPlugin) {\n      this.#peppyBypassStatus = {\n        available: false,\n        reason: pap.getI18n('PEPPY_ALSA_PIPE_BYPASS_COMPAT_PLUGIN', compatPlugin.pluginName)\n      };\n      await this.#removeNoPeppyConf();\n      return;\n    }\n\n    const snippets: Array<AlsaSnippet | null> = await Promise.all(contribs.map(async (contrib) => {\n      if (contrib.configFile) {\n        try {\n          const contents = await readFile(contrib.configFile, { encoding: 'utf-8'});\n          return {\n            inPCM: contrib.inPCM,\n            outPCM: contrib.outPCM,\n            contents\n          };\n        }\n        catch (error) {\n          return null;\n        }\n      }\n      return null;\n    }));\n\n    let outPCM = PEPPY_BYPASS_ALSA_DEVICE;\n    let hasSoftVolume = false;\n    const confParts: string[] = [];\n    for (const snippet of snippets) {\n      if (snippet) {\n        confParts.push(`\n          pcm.${outPCM} {\n            type empty\n            slave.pcm \"${snippet.inPCM}\"\n          }\n\n        `);\n\n        /**\n         * Break if we encounter 'softvolume'. This should be the last\n         * PCM in the pipeline before 'volumioOutput'. Volumio creates\n         * 'SoftMaster' control under 'softvolume' and uses it for software\n         * volume - we need to preserve this.\n         */\n        if (snippet.inPCM === 'softvolume') {\n          hasSoftVolume = true;\n          break;\n        }\n\n        confParts.push(snippet.contents);\n\n        outPCM = snippet.outPCM;\n      }\n    }\n    if (!hasSoftVolume) {\n      confParts.push(`\n        pcm.${outPCM} {\n          type empty\n          slave.pcm \"volumioOutput\"\n        }\n      `);\n    }\n\n    // ALSA ctl - for players like Squeezelite which requires it for Hardware mixer\n    const outputDevice = alsaController.getConfigParam('outputdevice');\n    const card = outputDevice.indexOf(',') >= 0 ? outputDevice.charAt(0) : outputDevice;\n    confParts.push(`\n      ctl.${PEPPY_BYPASS_ALSA_DEVICE} {\n        type hw\n        card ${card}\n      }  \n    `);\n\n    let noPeppyConf = confParts.join(EOL);\n\n    // Find and modify all defined PCM names\n    const pcmNameRegex = /(pcm|pcm_slave)\\.(.+) {/gm;\n    const pcmNameMatches = noPeppyConf.matchAll(pcmNameRegex);\n    const pcmNames: string[] = [];\n    for (const p of pcmNameMatches) {\n      pcmNames.push(p[2]);\n    }\n    noPeppyConf = noPeppyConf\n      .replace(pcmNameRegex, '$1.$2_noPeppy {')\n      .replace(`${PEPPY_BYPASS_ALSA_DEVICE}_noPeppy`, PEPPY_BYPASS_ALSA_DEVICE);\n\n    if (hasSoftVolume) {\n      noPeppyConf = noPeppyConf.replace('softvolume_noPeppy', 'softvolume');\n    }\n\n    // Modify slave references\n    const slaveNameRegex = /(pcm|slave)(?!\\.) +(.+)/;\n    const modifiedConfLines: string[] = [];\n    for (const line of noPeppyConf.split(EOL)) {\n      let slaveName = line.match(slaveNameRegex)?.[2];\n      if (slaveName && slaveName.startsWith('\"') && slaveName.endsWith('\"')) {\n        slaveName = slaveName.substring(1, slaveName.length - 1);\n      }\n      if (slaveName && slaveName !== PEPPY_BYPASS_ALSA_DEVICE &&\n        slaveName !== 'softvolume' &&\n        slaveName !== 'volumioOutput' && pcmNames.indexOf(slaveName) >= 0) {\n\n        modifiedConfLines.push(line.replace(slaveNameRegex, `$1 \"${slaveName}_noPeppy\"`));\n      }\n      else {\n        modifiedConfLines.push(line);\n      }\n    }\n\n    // Finalize noPeppyConf\n    noPeppyConf = modifiedConfLines.join(EOL) + EOL;\n\n    try {\n      await writeFile(PEPPY_BYPASS_CONF_TMP_FILE, noPeppyConf);\n      await execCommand(`/bin/mv ${PEPPY_BYPASS_CONF_TMP_FILE} ${PEPPY_BYPASS_CONF_FILE}`, true);\n      await this.#reloadAlsaConf();\n    }\n    catch (error) {\n      pap.getLogger().error(\n        pap.getErrorMessage(`[peppy_alsa_pipe] Failed to update \"${PEPPY_BYPASS_CONF_FILE}\":`, error));\n      pap.toast('error', pap.getI18n('PEPPY_ALSA_PIPE_ERR_UPDATE_ALSA_CONF'));\n      this.#peppyBypassStatus = {\n        available: false,\n        reason: pap.getI18n('PEPPY_ALSA_PIPE_CONF_UPDATE_ERR', PEPPY_BYPASS_CONF_FILE)\n      };\n      return;\n    }\n\n    this.#peppyBypassStatus = {\n      available: true,\n      alsaDevice: PEPPY_BYPASS_ALSA_DEVICE\n    };\n\n    pap.toast('success', pap.getI18n('PEPPY_ALSA_PIPE_ALSA_CONF_UPDATED'));\n  }\n\n  #reloadAlsaConf() {\n    return execCommand('/usr/sbin/alsactl -L -R nrestore', true);\n  }\n\n  async #updateMPDConf() {\n    if (pap.getConfigValue('mpdConfModify') === 'none') {\n      this.#mpdConfStatus = {\n        modified: false,\n        reason: pap.getI18n('PEPPY_ALSA_PIPE_NO_MOD_BY_SETTING')\n      };\n      return;\n    }\n    if (!this.#peppyBypassStatus.available) {\n      this.#mpdConfStatus = {\n        modified: false,\n        reason: pap.getI18n('PEPPY_ALSA_PIPE_BYPASS_UNAVAILABLE')\n      };\n      return;\n    }\n    try {\n      await execCommand(`/usr/bin/sudo /bin/chmod 777 ${MPD_CONF_FILE}`, true);\n      const conf = await readFile(MPD_CONF_FILE, { encoding: 'utf-8' });\n      const volumioAudioOutputRegex = new RegExp(`(^(?!#).?audio_output.*?{.+?type.*?)(\"${FULL_PIPELINE_ALSA_DEVICE}\")(.*?})`, 'gms');\n      const injectPeppyAudioOutput = `\n        audio_output {\n          type      \"alsa\"\n          name      \"${PEPPY_FIFO_ALSA_DEVICE}\"\n          device    \"peppy_fifo\"\n          format    \"44100:16:2\"\n        }\n      `;\n      const newConf = conf.replace(volumioAudioOutputRegex,\n        `$1\"${PEPPY_BYPASS_ALSA_DEVICE}\"$3\n        ${injectPeppyAudioOutput}\n      `);\n\n      await writeFile(MPD_CONF_FILE, newConf);\n    }\n    catch (error) {\n      pap.getLogger().error(\n        pap.getErrorMessage(`[peppy_alsa_pipe] Failed to update \"${MPD_CONF_FILE}\"`, error));\n      pap.toast('error', pap.getI18n('PEPPY_ALSA_PIPE_ERR_UPDATE_MPD_CONF'));\n      this.#mpdConfStatus = {\n        modified: false,\n        reason: pap.getI18n('PEPPY_ALSA_PIPE_CONF_UPDATE_ERR', MPD_CONF_FILE)\n      };\n      return;\n    }\n\n    this.#mpdConfStatus = {\n      modified: true,\n      description: pap.getI18n('PEPPY_ALSA_PIPE_MPD_CONF_BYPASS', PEPPY_BYPASS_ALSA_DEVICE, PEPPY_FIFO_ALSA_DEVICE)\n    };\n\n    pap.toast('success', pap.getI18n('PEPPY_ALSA_PIPE_MPD_CONF_UPDATED'));\n    pap.getMpdPlugin().restartMpd();\n  }\n\n  async destroy() {\n    this.#clearPlayerConfigChangeDelayTimer();\n    if (this.#playerConfWatcher) {\n      this.#playerConfWatcher.removeAllListeners();\n      await this.#playerConfWatcher.close();\n      this.#playerConfWatcher = null;\n    }\n    await this.#removeNoPeppyConf();\n    this.#updateVolumioSharedVars(true);\n  }\n\n  getAlsaDevices() {\n    return {\n      fullPipeline: FULL_PIPELINE_ALSA_DEVICE,\n      peppyBypass: this.#peppyBypassStatus,\n      peppyOnly: PEPPY_FIFO_ALSA_DEVICE\n    };\n  }\n\n  getMpdConfStatus() {\n    return this.#mpdConfStatus;\n  }\n\n  #updateVolumioSharedVars(destroy = false) {\n    let exports: PeppyAlsaPipeExports | null = null;\n\n    if (!destroy) {\n      const alsaDevices = this.getAlsaDevices();\n      let bypass;\n      if (alsaDevices.peppyBypass.available) {\n        bypass = alsaDevices.peppyBypass.alsaDevice;\n      }\n      else {\n        bypass = null;\n      }\n\n      exports = {\n        fifoPaths: {\n          meter: FIFO_PATH.METER,\n          spectrum: FIFO_PATH.SPECTRUM\n        },\n        alsaDevices: {\n          fullPipeline: alsaDevices.fullPipeline,\n          peppyBypass: bypass,\n          peppyOnly: alsaDevices.peppyOnly\n        }\n      };\n    }\n\n    /**\n     * Do not call `delete(key)` on sharedVars even if destroy=true, otherwise ALL callbacks registered\n     * under the key will get deleted as well!\n     */\n    pap.getVolumioSharedVars().set(EXPORTS_SHARED_VAR_KEY, JSON.stringify(exports));\n  }\n}\n"]}